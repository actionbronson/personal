#!/usr/local/bin/python
import sys
import argparse
import json
import os
import logging
import getopt
import errno  
import re
import datetime
import ConfigParser
from subprocess import call

def trackNameFromFilename(regex,gn,basename):
  return re.search(regex, basename).groups(1)[1]

def shnfix(targetBase,showDir,subDir,fileType):
  os.system("shnfix -o wav -d \"{}\" -z \"\" -b *.flac *.{} 2>/dev/null".format(os.path.join(targetBase,showDir,subDir),fileType))

def fix_compressed(showDir,subDir,ext,command):
  shnfix(args.destination,showDir,subDir,ext.upper())
  for filename in os.listdir("."):
    if (filename.upper().endswith(ext.upper())):
      basename = os.path.splitext(os.path.basename(filename))[0]
      if (not os.path.isfile(os.path.join(args.destination,showDir,subDir,basename + ".wav"))):
        os.system(command(filename))

def fixflac(showDir,subDir):
    fix_compressed(showDir,subDir,"FLAC",lambda f: "flac -F -s -d --output-prefix=\"{}/\" \"{}\"".format(os.path.join(args.destination,showDir,subDir), f))

def fixshn(showDir,subDir):
    fix_compressed(showDir,subDir,"SHN",lambda f: "shorten -x \"{}\" \"{}\"".format(f,os.path.join(args.destination,showDir,subDir,os.path.splitext(os.path.basename(f))[0] + ".wav")))

def subdirectories(a_dir):
  subs = [name for name in os.listdir(a_dir) if os.path.isdir(os.path.join(a_dir, name))]
  subs.sort()
  subs.append(".")
  return subs

def decode(info):
  artist = info.get("artist", config.get(header,"artist"))
  dir    = info.get("dir")
  tracks = info.get("songs", info.get("tracks"))
  year   = info.get("year", datetime.datetime.now().year)
  hashlookup = info.get("hashlookup")
  if hashlookup is None:
    hashlookup = True
  album = info.get("album")
  if album is None:
    album = dir
  disk = 0
  mainidx = 0
  os.chdir(os.path.join(args.source,dir))
  for d in subdirectories("."):
    try:
      os.makedirs(os.path.join(args.destination,dir,d))
    except OSError as exc:
      if exc.errno == errno.EEXIST and os.path.isdir(args.destination):
        pass
      else:
        raise
    os.chdir(os.path.join(args.source,dir,d))
    logging.info("Attempting to fix in " + os.path.join(args.source,dir,d))
    if (len(filter(lambda x: x.upper().endswith("FLAC"), os.listdir("."))) > 0):
      fixflac(dir,d)
    elif (len(filter(lambda x: x.upper().endswith("SHN"), os.listdir("."))) > 0):
      fixshn(dir,d)
    os.chdir(os.path.join(args.destination,dir,d))
    wavs = sorted(filter(lambda x: x.upper().endswith("WAV"), os.listdir(".")))
    lenwavs = len(wavs)
    logging.info("Decoded {} wav files.".format(lenwavs))
    if (lenwavs > 0):
      disk = disk + 1
      os.chdir(os.path.join(args.destination,dir,d))
      track = 0
      ttrack = lenwavs
      for idx, wav in enumerate(wavs):
        track = track + 1
        basename = os.path.splitext(os.path.basename(wav))[0]
        trackname = basename
        logging.info("Encoding \"{}.m4a\", track: {}/{} disc: {}".format(basename,track,ttrack,disk))
        cmd = "afconvert \"{}\" -d aac -f m4af -u pgcm 2 -b {} -q 127 -s 0 --soundcheck-generate ".format(wav,args.bitrate)
        if (idx > 0):
          cmd = cmd + " --gapless-before \"{}\"".format(wavs[idx-1])
        if (idx != lenwavs - 1):
          cmd = cmd + " --gapless-after \"{}\"".format(wavs[idx+1])
        cmd = cmd + " \"{}.m4a\"".format(basename)
        if (not args.noencode):
          logging.debug(cmd) 
          os.system(cmd)
          if tracks is not None:
            title = dictionary.get(tracks[mainidx], tracks[mainidx])
          else:
            title = basename
          title = title.replace(u"\u2018", "'").replace(u"\u2019", "'")
          apCmd = "{} \"{}.m4a\" --artist=\"{}\" --album=\"{}\" --disk {} --tracknum {}/{} --gapless true --compilation false --stik Normal --albumArtist \"{}\" --year {} --title \"{}\" 2>/dev/null 1>&2".format(atomic_parsley,basename,artist,album,disk,track,ttrack,artist,year,title)
          mainidx += 1
          logging.debug(apCmd)
          os.system(apCmd)
          logging.info("Edited meta-data - artist: {}, title: {}, album: {} on {}.m4a".format(artist,title,album,basename))
          os.unlink("{}.m4a".format(basename))
      if (not args.keepwav):
        logging.info("Unlinking {}".format(str(wavs)))
        for wav in wavs:
          os.unlink(wav)

logging.basicConfig(level=logging.INFO, format='%(asctime)-9s %(levelname)s %(message)s')
header = 'aacencode'
here = os.path.realpath(__file__)
config = ConfigParser.ConfigParser()
config.read(os.path.join(os.path.dirname(here) ,"pinkfloyd.cfg"))

atomic_parsley = os.path.join(os.path.dirname(here), config.get(header,'atomicparsley'))

parser = argparse.ArgumentParser(description='Encode FLAC/SHN to AAC.')
parser.add_argument('file', help='the descriptor file to process..')
parser.add_argument('-n', dest = 'noencode', default = config.getboolean(header,'noencode'), help='decode to wav and exit.')
parser.add_argument('-w', dest = 'keepwav', default = config.getboolean(header,'keepwav'), help='dont delete wav files.')
parser.add_argument('-b', dest = 'bitrate', default = config.get(header,'bitrate'), help='encoding bitrate.')
parser.add_argument('-d', dest = 'dictionary', help='dictionary file.')
parser.add_argument('--dest', dest = 'destination', default = os.getenv('HOME'), help='where to write the files.')
parser.add_argument('--src', dest = 'source', default = config.get(header,'source'), help='where to read the files from.')
args = parser.parse_args()

if (args.dictionary is None):
  dictionary = os.path.join(os.path.dirname(here),config.get(header,'dictionary'))
else:
  dictionary = args.dictionary 

with open(dictionary) as track_dictionary:
  dictionary = json.load(track_dictionary)

logging.info("Using {} as info file, noencode: {}, keepwav: {}".format(args.file,args.noencode, args.keepwav))

with open(args.file) as f:
  data = json.load(f)
  try:
    os.makedirs(args.destination)
  except OSError as exc:
    if exc.errno == errno.EEXIST and os.path.isdir(args.destination):
      pass
    else:
      raise
  logging.info("Using {} as the root directory.".format(args.source))
  decode(data)
